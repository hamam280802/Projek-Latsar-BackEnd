// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
}

enum IssueStatus {
  Waiting
  InProgress
  Resolved
}

model Avatar {
  id       String @id @default(uuid())
  publicId String
  url      String
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id])
}

model SurveyActivity {
  id   String @id @default(uuid())
  name String
  slug String @unique

  SubSurveyActivity SubSurveyActivity[]
}

model SubSurveyActivity {
  id               String         @id @default(uuid())
  name             String
  slug             String         @unique
  surveyActivityId String
  surveyActivity   SurveyActivity @relation(fields: [surveyActivityId], references: [id])
  startDate        DateTime
  endDate          DateTime
  targetSample     Int
  districtId       String?
  district         District?      @relation(fields: [districtId], references: [id])

  issues       Issue[]
  UserProgress UserProgress[]
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  phone_number String
  address      String?
  password     String
  role         Role     @default(User)
  avatar       Avatar?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  issues        Issue[]
  issueComments IssueComment[]
  UserProgress  UserProgress[]
}

model Issue {
  id                  String            @id @default(uuid())
  content             String
  status              IssueStatus       @default(Waiting)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  userId              String
  user                User              @relation(fields: [userId], references: [id])
  subSurveyActivityId String
  subSurveyActivity   SubSurveyActivity @relation(fields: [subSurveyActivityId], references: [id])

  issueComments IssueComment[]
}

model IssueComment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  issueId   String
  user      User     @relation(fields: [userId], references: [id])
  issues    Issue    @relation(fields: [issueId], references: [id])
}

model UserProgress {
  id                  String             @id @default(uuid())
  userId              String             @unique
  user                User               @relation(fields: [userId], references: [id])
  subSurveyActivityId String?
  subSurveyActivity   SubSurveyActivity? @relation(fields: [subSurveyActivityId], references: [id])
  totalAssigned       Int                @default(0)
  submitCount         Int                @default(0)
  approvedCount       Int                @default(0)
  rejectedCount       Int                @default(0)
  lastUpdated         DateTime           @updatedAt
  districtId          String?
  district            District?          @relation(fields: [districtId], references: [id])
}

model District {
  id   String @id @default(uuid())
  city String
  name String

  SubSurveyActivity SubSurveyActivity[]

  UserProgress UserProgress[]
}

// name,email,password,role,phone_number,address, 
